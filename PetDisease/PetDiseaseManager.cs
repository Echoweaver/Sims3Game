using System;
using Sims3.Gameplay.CAS;
using Sims3.SimIFace;
using Sims3.SimIFace.CustomContent;
using System.Collections.Generic;
using Sims3.Gameplay.Utilities;
using Sims3.Gameplay.Actors;
using Sims3.Gameplay.ActorSystems;
using Sims3.Gameplay.Core;
using Sims3.Gameplay.EventSystem;
using Sims3.Gameplay.Objects.CookingObjects;
using Sims3.Gameplay.Seasons;
using Sims3.Gameplay.Services;
using Sims3.Gameplay.Socializing;
using Sims3.SimIFace.Enums;
using Sims3.UI;
using Sims3.UI.Controller;

namespace Echoweaver.Sims3Game.PetDisease
{

    // Diseases:
    // Germy (Whitecough) -- common cold.
    //   -- Generated from weather changes
    //   -- Symptoms: Coughing, energy reduction
    // Pneumonia (Greencough)
    //   -- Develops from Germy.
    //   -- Symptoms: Fever, exhaustion, frequent coughing, delerium
    //   -- Contagion by contact
    //   -- Can be lethal.
    // Petstilence (Carrionplace Disease)
    //   -- Generated from fights or hunting.
    //   -- Chance of getting it with fleas
    //   -- Bloodborne, transmitted by fighting, woohoo
    //   -- Symptoms: passing out and vomiting,
    //   -- Frequently lethal.
    // Stomach Flu
    //   -- Generated from Contact with non-resident animals, drink/play in toilet
    //   -- Transmitted by proximity to vomit piles or vomiting
    //   -- Is it possible to tag vomit piles as diseased?
    //   -- Symptoms: random nausea moodlets
    //   -- Called Tummy Trouble, looks identical to Food Poisoning
    // Food Poisoning
    //   -- Generated from eating, likely with spoiled food
    //   -- Also generated by from some kinds of berries?
    //      -- (holly, juniper, nightshade, dogwood, poke, mistletoe, elderberry,  gooseberries,
    //      -- marionberries, salmonberries, cherries, and serviceberries, baneberries, *tomatoes,
    //      -- *onions, *garlic, rubarb, tree nuts, aloe (cats), parsley (cats))
    //      -- Proposed: Cherry, tomato, onion, garlic
    //   -- Not contagious
    //   -- Symptoms: random nausea moodlets
    //   -- Called Tummy Trouble, looks identical to Stomach Flu
    // Childbirth Crisis:
    //   -- Triggered when pet enters childbirth?
    //   -- If not cured, generates a wound and/or one offspring doesn't survive.

    public class PetDiseaseManager
    {
        [Persistable]
        static public Dictionary<ulong, DateAndTime> VaccineRecord = new Dictionary<ulong, DateAndTime>();

        public PetDiseaseManager()
        {
        }

        public static bool CheckForVaccination(Sim s)
        {
            if (VaccineRecord.ContainsKey(s.SimDescription.SimDescriptionId))
            {
                DateAndTime vaccineDate = VaccineRecord[s.SimDescription.SimDescriptionId];
                if (SimClock.ElapsedTime(TimeUnit.Days, vaccineDate) <= SeasonsManager.GetYearLength())
                {
                    // Sim is vaccinated. It can't get germy, pneumonia, or petstilence
                    return true;
                }
            }
            return false;
        }

        public static void Vaccinate(ulong simID)
        {
            VaccineRecord[simID] = SimClock.CurrentTime();
        }

        public static ListenerAction OnWeatherStarted(Event e)
        {
            if (e is WeatherEvent)
            {
                WeatherEvent we = e as WeatherEvent;
                if (we.Weather == Weather.Hail || we.Weather == Weather.Rain || we.Weather == Weather.Snow)
                {
                    StyledNotification.Show(new StyledNotification.Format("Check for weather change GermyPet " +
                        e.GetType().ToString(), StyledNotification.NotificationStyle.kGameMessagePositive));
                    foreach (Lot allLot in LotManager.AllLots)
                    {
                        List<Sim> list = allLot.GetSims() as List<Sim>;
                        foreach (Sim s in list)
                        {
                            if (s.InWorld && (s.IsCat || s.IsADogSpecies) && s.SimDescription.AdultOrAbove)
                            {
                                // Including the role checks because maybe a mod uses pet roles? I don't think
                                // there are any pet roles or service sims right now.
                                if (s.SimDescription.AssignedRole != null || ServiceSituation.IsSimOnJob(s)
                                        || s.IsGhostOrHasGhostBuff || s.IsDying()
                                        || SeasonsManager.IsShelteredFromPrecipitation(s))
                                {
                                    continue;
                                }
                            }
                            Buffs.BuffEWPetGermy.CheckWeatherContagion(s);
                        }
                    }
                }
            }
            else
            {
                StyledNotification.Show(new StyledNotification.Format("Test: OnWeatherStarted event is not WeatherEvent type" +
                    e.GetType().ToString(), StyledNotification.NotificationStyle.kDebugAlert));

            }
            return ListenerAction.Keep;
        }

        public static ListenerAction OnChangedInsideOutsideStatus(Event e)
        {
            if (e.Actor.InWorld && (e.Actor.SimDescription.IsCat || e.Actor.SimDescription.IsADogSpecies)
                && e.Actor.IsOutside)
            {
                PrecipitationIntensity intensity;

                // Can't check for hail?
                if (SeasonsManager.IsRaining(out intensity) || SeasonsManager.IsSnowing(out intensity)
                    || SeasonsManager.IsExtremeCold())
                {
                    Buffs.BuffEWPetGermy.CheckWeatherContagion(e.Actor as Sim);
                }
            }
            return ListenerAction.Keep;
        }

        public static ListenerAction OnGoFishingCat(Event e)
        {
            Buffs.BuffEWTummyTrouble.CheckAmbientContagion(e.Actor as Sim);
            return ListenerAction.Keep;
        }

        public static ListenerAction OnPlayedInToilet(Event e)
        {
            if (e.Actor.SimDescription.IsCat || e.Actor.SimDescription.IsADogSpecies)
            {
                Buffs.BuffEWTummyTrouble.CheckInteractionContagion(e.Actor as Sim);
            }
            return ListenerAction.Keep;
        }

        public static ListenerAction OnEatTrash(Event e)
        {
            if (e.Actor.SimDescription.IsCat || e.Actor.SimDescription.IsADogSpecies)
            {
                Buffs.BuffEWTummyTrouble.CheckEatContagion(e.Actor as Sim);
            }
            return ListenerAction.Keep;
        }

        public static ListenerAction OnGotFleas(Event e)
        {
            if (e.Actor.SimDescription.IsCat || e.Actor.SimDescription.IsADogSpecies)
            {
                Buffs.BuffEWPetstilence.CheckAmbientContagion(e.Actor as Sim);
            }
            return ListenerAction.Keep;
        }

        public static ListenerAction OnPetWoohooed(Event e)
        {
            if (e.Actor.SimDescription.IsCat || e.Actor.SimDescription.IsADogSpecies)
            {
                Buffs.BuffEWPetstilence.CheckContactContagion(e.Actor as Sim);
            }
            return ListenerAction.Keep;
        }

        public static ListenerAction OnAteHumanFood(Event e)
        {
            PreparedFood food = e.TargetObject as PreparedFood;

            if (food != null)
            {
                if (e.Actor.SimDescription.IsCat || e.Actor.SimDescription.IsADogSpecies)
                {
                    if (food.IsSpoiled)
                    {
                        Buffs.BuffEWTummyTrouble.CheckFoodPoisoningSpoiled(e.Actor as Sim);
                    }
                    else
                    {
                        Buffs.BuffEWTummyTrouble.CheckFoodPoisoning(e.Actor as Sim);
                    }
                }
            }
            return ListenerAction.Keep;
        }

        public static ListenerAction OnAtePrey(Event e)
        {
            if (e.Actor.SimDescription.IsCat || e.Actor.SimDescription.IsADogSpecies)
            {
                Buffs.BuffEWTummyTrouble.CheckAmbientPoisoning(e.Actor as Sim);
            }
            return ListenerAction.Keep;
        }


        public static ListenerAction OnSocialInteraction(Event e)
        {
            // Turns out a social interaction like "Chat" triggers 4 events of EventTypeId kSocialInteraction.
            // Two cast to SocialEvent, one for the recipient and one for the initiator. I have no idea what
            // the other two are, but we don't care about them.
            if (e is SocialEvent)
            {
                SocialEvent cevent = (SocialEvent)e;
                Sim actorSim = cevent.Actor as Sim;
                Sim targetSim = cevent.TargetObject as Sim;

                if ((actorSim.IsCat || actorSim.IsADogSpecies) && (targetSim.IsCat || targetSim.IsADogSpecies)
                    && actorSim.SimDescription.AdultOrAbove && targetSim.SimDescription.AdultOrAbove)
                {
                    // We're going to get a social event with each sim as Actor, so just check that one
                    if (cevent != null && cevent.SocialName.Contains("Fight Pet"))
                    {
                        if (targetSim.BuffManager.HasElement(Buffs.BuffEWPetstilence.buffName))
                        {
                            Buffs.BuffEWPetstilence.CheckContactContagion(actorSim);
                        }
                        else
                        {
                            // A fight with a stranger has a low chance of generating Petstilence
                            Relationship relationship = Relationship.Get(actorSim, targetSim, createIfNone: false);

                            // This is a bit clunky, but I don't want it to crash because I tried to check
                            // against an attribute of a null object
                            if (relationship == null)
                            {
                                Buffs.BuffEWPetstilence.CheckAmbientContagion(actorSim);
                            }
                            else if (relationship.CurrentLTR == LongTermRelationshipTypes.Stranger)
                            {
                                Buffs.BuffEWPetstilence.CheckAmbientContagion(actorSim);
                            }

                        }
                    }

                    else if (cevent.SocialName.Contains("Greet Sniff"))
                    {
                        // Meeting a strange pet has a low chance of generating any proximity contagion
                        Relationship relationship = Relationship.Get(actorSim, targetSim, createIfNone: false);

                        if (relationship == null)
                        {
                            Buffs.BuffEWPetGermy.CheckAmbientContagion(actorSim);
                        }
                        else if (relationship.CurrentLTR == LongTermRelationshipTypes.Stranger)
                        {
                            Buffs.BuffEWPetstilence.CheckAmbientContagion(actorSim);
                        }
                    }

                }

            }

            // Any disease check
            // kMetSim
            //"Greet Sniff",
            //"Greet",
            //"Hello Rude",

            return ListenerAction.Keep;
        }


    }
}



